use std::fs;

#[derive(Debug)]
struct Robot {
    x: i32,
    y: i32,
    vx: i32,
    vy: i32,
}

impl Robot {
    fn from_line(s: &str) -> Self {
        let (ps, vs) = s.split_once(' ').unwrap();
        let (x, y) = ps.strip_prefix("p=").unwrap().split_once(',').unwrap();
        let (vx, vy) = vs.strip_prefix("v=").unwrap().split_once(',').unwrap();

        Self {
            x: x.parse().unwrap(),
            y: y.parse().unwrap(),
            vx: vx.parse().unwrap(),
            vy: vy.parse().unwrap(),
        }
    }
}

fn final_positions(robots: &[Robot], seconds: i32, w: i32, h: i32) -> Vec<(i32, i32)> {
    robots.iter().map(|r| {
        let final_x = r.x + seconds * r.vx;
        let final_y = r.y + seconds * r.vy;

        let final_x = if final_x >= 0 { final_x % w } else { w + ((final_x + 1) % w) - 1 };
        let final_y = if final_y >= 0 { final_y % h } else { h + ((final_y + 1) % h) - 1 };

        (final_x, final_y)
    }).collect()
}

fn safety_factor(robot_positions: &[(i32, i32)], w: i32, h: i32) -> i32 {
    let mut q1 = 0;
    let mut q2 = 0;
    let mut q3 = 0;
    let mut q4 = 0;

    let mid_x = w / 2;
    let mid_y = h / 2;

    for pos in robot_positions {
        if pos.0 < mid_x && pos.1 < mid_y {
            q1 += 1;
        } else if pos.0 > mid_x && pos.1 < mid_y {
            q2 += 1;
        } else if pos.0 < mid_x && pos.1 > mid_y {
            q3 += 1;
        } else if pos.0 > mid_x && pos.1 > mid_y {
            q4 += 1;
        }
    }
    println!("{q1} {q2} {q3} {q4}");

    q1 * q2 * q3 * q4
}

fn is_christmas_tree_space(x: i32, y: i32, w: i32, h: i32) -> bool {
    let x = if x >= 0 { x % w } else { w + ((x + 1) % w) - 1 };
    let y = if y >= 0 { y % h } else { h + ((y + 1) % h) - 1 };

    let mid_x = w / 2;

    (x - mid_x).abs() == (h - y)
}

fn christmas_tree(robot_positions: &[(i32, i32)]) -> i32 {

}

fn main() {
    let (input, w, h) = (fs::read_to_string("input/input_ex.txt").unwrap(), 11, 7);
    //let (input, w, h) = (fs::read_to_string("input/input.txt").unwrap(), 101, 103);
    println!("{}", is_christmas_tree_space(0, 6, w, h));

    let robots: Vec<Robot> = input.lines().map(Robot::from_line).collect();

    let final_positions = final_positions(&robots, 100, w, h);
    println!("{final_positions:?}");
    let result = safety_factor(&final_positions, w, h);
    println!("{result}");
}
